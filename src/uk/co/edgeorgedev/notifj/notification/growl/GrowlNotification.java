/**
 * GrowlNotification.java
 * NotifJ
 *
 * Created by Ed George on 30 Dec 2014
 *
 */
package uk.co.edgeorgedev.notifj.notification.growl;

import java.net.URL;

import org.apache.commons.lang3.SystemUtils;

import uk.co.edgeorgedev.notifj.notification.Notification;
import uk.co.edgeorgedev.notifj.notification.exception.NotificationException;
import uk.co.edgeorgedev.notifj.notification.exception.NotificationOperatingSystemException;

/**
 * This class consists of methods to create Growl Notification messages that can be displayed on both Windows and Mac OS X
 *
 * <p>The <tt>open()</tt> and <tt>show()</tt> methods of this class throw a <tt>NotificationException</tt>
 * if the creation of a Growl Notification fails.
 * 
 * <p>It should also be noted that <tt>open()</tt> will throw a <tt>NotificationOperatingSystemException</tt>
 * should it be called on an unsupported operating system.
 * 
 * <p> GrowlNotification can be automatically closed through the use of a 'try-with-resources' block
 *
 * @author  Ed George
 * @see     Notification
 * @see     WindowsGrowlNotification
 * @see     OSXGrowlNotification
 * @since   1.2
 */
public class GrowlNotification implements Notification, AutoCloseable{

	private GrowlNotification notification;
	protected String application_name;
	protected boolean sticky;
	protected URL callback_url;
	
	/**
	 * Constructs an unregistered named Growl notification application
	 * 
	 * <p>The registration process occurs within the {@link #open()} method.
	 * 
	 * <p>This class creates notifications that can be viewed by Growl for OSX <b>and</b> Growl for Windows (GFW)
	 * 
	 * @since 1.2
	 *
	 */
	public GrowlNotification(String application_name) throws NotificationException {
		
		setApplicationName(application_name);
		
		if(SystemUtils.IS_OS_WINDOWS){
			notification = new WindowsGrowlNotification();
		}else if (SystemUtils.IS_OS_MAC_OSX){
			notification = new OSXGrowlNotification();
		}else{
			throw new NotificationOperatingSystemException("Only Windows and Mac OS X operrating systems are supported");
		}
	
	}

	/*
	 * Empty constructor for child classes
	 */
	protected GrowlNotification(){}

	/*
	 * Application name setter for child classes
	 */
	protected void setApplicationName(String application_name){
		this.application_name = application_name;
	}

	/**
	 * Creates relevant platform variables required 
	 * 
	 * @throws NotificationException if the client registration fails
	 * @throws NotificationOperatingSystemException if the system operating system is <i>not</i> Windows
	 * @since 1.2
	 */
	@Override
	public void open() throws NotificationException {
		notification.open();
	}

	/**
	 * Displays a Growl Notification with a given title and message
	 * 
	 * @param  title the title of the notification.
	 * @param  message the message body of the notification. 
	 * @throws NotificationException if an error occurs trying to display the message
	 * @since 1.2
	 */
	@Override
	public void show(String title, String message) throws NotificationException {
		notification.setApplicationName(application_name);
		notification.callbackUrl(callback_url);
		notification.sticky(sticky);
		notification.show(title, message);
	}

	/**
	 * Frees any system notification related objects 
	 * @throws NotificationException if clean-up fails
	 * @since 1.2
	 */
	@Override
	public void close() throws NotificationException {
		notification.close();	
	}


	/**
	 * Enables any subsequent notifications to be <i>sticky</i> by being displayed until dismissed
	 * 
	 * <p>Notifications created by <tt>GrowlNotification</tt> are non-sticky by default
	 * 
	 * @since 1.2
	 * @return the modified <tt>GrowlNotification</tt> object
	 */
	public GrowlNotification sticky(){
		this.sticky = true;
		return this;
	}

	/**
	 * Enables/Disables any subsequent notifications to be <i>sticky</i> by being displayed until dismissed
	 * @param sticky <tt>true</tt> if sticky Growl Notifications are to be enabled and <tt>false</tt> otherwise.
	 * 
	 * <p>Notifications created by <tt>GrowlNotification</tt> are non-sticky by default
	 * 
	 * @see #sticky()
	 * @since 1.2
	 * @return the modified <tt>GrowlNotification</tt> object
	 */
	public GrowlNotification sticky(boolean sticky){
		this.sticky = sticky;
		return this;
	}

	/**
	 * Check if notifications are sticky
	 * @since 1.2
	 * @return <tt>true</tt> if notifications generated by this object are sticky and <tt>false</tt> otherwise.
	 */
	public boolean isSticky() {
		return sticky;
	}

	/**
	 * Adds a callback url to notifications. 
	 * 
	 * <p>When a Growl notification is clicked, this URL will be opened by the system's default browser
	 * 
	 * @param callback_url the callback URL to open - <tt>null</tt> can be used to remove the callback as can {@link #removeCallback()}
	 * @see #removeCallback()
	 * @since 1.2
	 * @return the modified <tt>GrowlNotification</tt> object
	 */
	public GrowlNotification callbackUrl(URL callback_url){
		this.callback_url = callback_url;
		return this;
	}

	/**
	 * Removes any previously associated callback. 
	 * 
	 * @see #callbackUrl(URL)
	 * @since 1.2
	 * @return the modified <tt>GrowlNotification</tt> object
	 */
	public GrowlNotification removeCallback(){
		callback_url = null;
		return this;
	}

	/**
	 * Get the notification's callback URL
	 * @since 1.2
	 * @return the callback URL - <tt>null</tt> if the callback is not set
	 */
	public URL getCallbackUrl() {
		return callback_url;
	}

}
